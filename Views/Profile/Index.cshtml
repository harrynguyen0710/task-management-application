@model task_management.ViewModels.UserDetails;
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Profile Detail</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tailwindcss@2.0.0/dist/tailwind.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        /* Avatar Styling */
        .avatar-image {
            width: 150px;
            height: 150px;
            border-radius: 50%;
            object-fit: cover;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        /* Button Styling */
        .btn-custom {
            background-color: #dc3545;
            color: white;
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 0.375rem;
            cursor: pointer;
            transition: background-color 0.3s ease;
            font-size: 1rem;
            margin-top: 20px;
        }

            .btn-custom:hover {
                background-color: #c82333;
            }

            .btn-custom:focus {
                outline: none;
                box-shadow: 0 0 0 2px rgba(220, 53, 69, 0.5);
            }

        /* Frame Styling */
        .frame {
            background-color: white;
            border-radius: 0.75rem;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.15);
            padding: 2rem;
            margin-bottom: 2rem;
        }

        /* Badge Styling */
        .badge-completed {
            background-color: #28a745;
            color: white;
        }

        .badge-onhold {
            background-color: #ffc107;
            color: white;
        }

        .badge-upcoming {
            background-color: #007bff;
            color: white;
        }
    </style>
</head>

<body class="bg-gray-100 text-gray-900">
    <div class="flex h-screen">
        <!-- Sidebar -->
        <div>
            @Html.Partial("_SidebarPartial")
        </div>

        <!-- Main Content -->
        <div class="flex-1 container mx-auto p-8 overflow-y-auto">
            <h1 class="text-3xl font-bold text-center mb-8">Profile Detail</h1>
            <!-- User Information Frame -->
            <div class="frame">
                <h5 class="text-lg font-semibold mb-4">User Information</h5>
                <div class="flex items-center">
                    <div class="w-1/3 flex justify-center">
                        <img src="~/images/@Model.User.PhotoUrl"
                             alt="User Avatar" class="avatar-image mb-3">
                    </div>
                    <div class="w-2/3 space-y-2">
                        <h4 class="text-2xl font-semibold">@Model.User.fullName</h4>
                        <p><strong>Email: </strong>@Model.User.Email</p>
                        <p><strong>Role: </strong> @Model.RoleNames.FirstOrDefault()</p>
                        <p><strong>Phone Number: </strong> @Model.User.PhoneNumber</p>
                    </div>
                </div>
            </div>


            <!-- Recent Activities Frame -->
            <div class="frame">
                <h5 class="text-lg font-semibold mb-4">Recent Activities</h5>

                    <div id="taskSection">
                        @await Html.PartialAsync("_TasksTablePartial", Model.Tasks)
                    </div>


                    <!-- Pagination Controls -->
                    <div class="mt-4 flex justify-center space-x-2">
                        @if (ViewBag.CurrentPage > 1)
                        {
                            <button onclick="loadTasks(@(ViewBag.CurrentPage - 1))" class="px-3 py-1 bg-gray-300 rounded hover:bg-gray-400">Previous</button>
                        }

                        @for (int i = 1; i <= ViewBag.TotalPages; i++)
                        {
                            <button onclick="loadTasks(@i)" class="px-3 py-1 @(i == ViewBag.CurrentPage ? "bg-blue-500 text-white" : "bg-gray-300 hover:bg-gray-400") rounded">
                                @i
                            </button>
                        }

                        @if (ViewBag.CurrentPage < ViewBag.TotalPages)
                        {
                            <button onclick="loadTasks(@(ViewBag.CurrentPage + 1))" class="px-3 py-1 bg-gray-300 rounded hover:bg-gray-400">Next</button>
                        }
                    </div>


                <form method="post" action="/Account/Logout">
                    <button type="submit" class="btn-custom">Logout</button>
                </form>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
</body>
</html>
<!-- Popup container Details Task -->
<div id="taskModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center hidden" onclick="closeModal(event)">
    <div class="bg-white p-6 rounded-lg shadow-md w-1/2" onclick="event.stopPropagation()">
        <div id="taskModalContent"></div>
        <div class="mt-4 text-right">
            <button class="bg-red-500 text-white py-2 px-4 rounded" onclick="closeModal()">Close</button>
        </div>
    </div>
</div>

<script>
    loadTasks(1);

       function loadTasks(pageNumber) {
        const userId = '@Model.User.Id';
        $.ajax({
            url: '@Url.Action("GetTasksPartial")',
            type: 'GET',
            data: { userId: userId, pageNumber: pageNumber },
            success: function (data) {
                $('#taskSection').html(data);
            },
            error: function () {
                alert("Failed to load tasks.");
            }
        });
    }
    function showTaskDetails(taskId) {
        console.log('This is task id::', taskId);
        console.log('Nguyen Ngoc Hoang');
        const taskContent = document.getElementById(`taskDetail-${taskId}`).innerHTML;
        console.log('task content::', taskContent);
        document.getElementById("taskModalContent").innerHTML = taskContent;
        document.getElementById("taskModal").classList.remove("hidden"); // Show pop-up
    }

    function closeModal(event) {
        document.getElementById("taskModal").classList.add("hidden"); // Hide pop-up
    }
</script>
<style>
    /* Base badge styling */
    .badge {
        padding: 0.25rem 0.75rem;
        border-radius: 9999px;
        font-size: 0.75rem;
        font-weight: bold;
        display: inline-block;
    }

    /* Status-specific badge colors */
    .badge-completed {
        background-color: #28a745; /* Green */
        color: white;
    }

    .badge-in-progress {
        background-color: #4299e1; /* Blue */
        color: white;
    }

    .badge-due {
        background-color: #f56565; /* Red */
        color: white;
    }

    .badge-on-hold {
        background-color: #ffc107; /* Yellow */
        color: black;
    }

    .badge-upcoming {
        background-color: #007bff; /* Blue */
        color: white;
    }

    .badge-default {
        background-color: #a0aec0; /* Gray */
        color: white;
    }
</style>






