@model task_management.ViewModels.ProjectDetails
@{
    ViewData["Title"] = "Member List";
}
<html>
<head>
    <title>Project Details</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        /* Team Members Frame */
        .team-members-frame {
            background-color: white;
            padding: 1.5rem;
            border-radius: 0.5rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 1.5rem;
        }

        .frame-title {
            font-size: 1.5rem;
            font-weight: bold;
            margin-bottom: 1rem;
        }

        .table-header, .table-row {
            display: flex;
            justify-content: space-between;
            width: 100%;
            align-items: center; /* Align items to center */
        }

        .table-row {
            padding: 0.5rem 0; /* Add padding to separate each row */
            margin-bottom: 0.5rem; /* Add margin between rows */
            border-bottom: 1px solid #e5e7eb; /* Light border to separate rows */
        }

        .header-item, .row-item {
            width: 33.33%;
            color: #4a4a4a;
        }

        .avatar-image {
            width: 4rem;
            height: 4rem;
            border-radius: 50%;
            margin-right: 1rem; /* Space between image and text */
        }

        /* Tasks Frame */
        .tasks-frame {
            background-color: white;
            padding: 1.5rem;
            border-radius: 0.5rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .frame-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .filter-section {
            display: flex;
            justify-content: space-between;
            margin-bottom: 1rem;
        }

        .filter-input {
            border: 1px solid #d1d5db;
            padding: 0.5rem;
            border-radius: 0.375rem;
            width: 23%;
            font-size: 1rem;
        }
    </style>
</head>
<body>
    <div class="team-members-frame">
        <h2 class="frame-title">Team Members</h2>
        @if (Model?.UserRole != null && Model.UserRole.Any())
        {
            <div class="table-header">
                <p class="header-item"><strong></strong></p>
                <p class="header-item"><strong>Name</strong></p>
                <p class="header-item text-center"><strong>Roles</strong></p>
            </div>
            @foreach (var user in Model.UserRole)
            {
                <div class="table-row">
                    <p class="row-item text-left">
                        @if (!string.IsNullOrEmpty(user.ImageUrl))
                        {
                            <img src="~/images/@user.ImageUrl" alt="User Image" class="avatar-image" />
                        }
                        else
                        {
                            <img src="/images/Icon/avatar.png" alt="Default Avatar" class="avatar-image" />
                        }
                    </p>
                    <p class="row-item text-left">
                        @user.fullName
                    </p>
                    <p class="row-item text-center">
                        @string.Join(", ", user.Roles ?? Enumerable.Empty<string>())
                    </p>
                </div>
            }
        }
    </div>

    <div class="tasks-frame">
        <div class="frame-header">
            <h2 class="frame-title">Project Tasks</h2>
        </div>
        <div class="filter-section">
            <input type="text" id="searchInput" placeholder="Search by title" class="filter-input">
            <select id="statusFilter" class="filter-input">
                <option value="">Filter by Status</option>
                <option value="Not Started">Not Started</option>
                <option value="In Progress">In Progress</option>
                <option value="Completed">Completed</option>
            </select>
            <select id="priorityFilter" class="filter-input">
                <option value="">Filter by Priority</option>
                <option value="Critical">Critical</option>
                <option value="High">High</option>
                <option value="Medium">Medium</option>
                <option value="Low">Low</option>
            </select>
            <select id="assigneeFilter" class="filter-input">
                <option value="">Filter by Assigned To</option>
                @if (ViewBag.Staff != null)
                {
                    @foreach (var user in ViewBag.Staff)
                    {
                        <option value="@user.Value">@user.Text</option>
                    }
                }
            </select>
        </div>
        <div id="taskSection, taskModal">
            @await Html.PartialAsync("_TasksPartial", Model)
            @await Html.PartialAsync("_TasksDetailPartial", Model)
        </div>
        <div class="flex justify-between space-x-4">
            <a asp-action="Index">
                <button class="bg-blue-500 text-white px-4 py-2 rounded">Back to List</button>
            </a>
        </div>
    </div>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script>
        function loadTasks(pageNumber, searchTerm = '', status = '', priority = '', assignee = '') {
            $.ajax({
                url: '@Url.Action("LoadTasks", "Project")',
                type: 'GET',
                data: {
                    projectId: '@Model.Project.projectId',
                    pageNumber: pageNumber,
                    searchTerm: searchTerm,
                    status: status,
                    priority: priority,
                    assignee: assignee
                },
                success: function (result) {
                    $('#taskSection').html(result);
                }
            });
        }

        $(document).ready(function () {
            // Initial load of tasks
            loadTasks(1);

            // Handle search input keyup event for real-time searching
            $('#searchInput').on('keyup', function () {
                var searchTerm = $(this).val();
                var status = $('#statusFilter').val();
                var priority = $('#priorityFilter').val();
                var assignee = $('#assigneeFilter').val();
                loadTasks(1, searchTerm, status, priority, assignee);
            });

            // Handle filter changes
            $('#statusFilter, #priorityFilter, #assigneeFilter').on('change', function () {
                var searchTerm = $('#searchInput').val();
                var status = $('#statusFilter').val();
                var priority = $('#priorityFilter').val();
                var assignee = $('#assigneeFilter').val();
                loadTasks(1, searchTerm, status, priority, assignee);
            });

            // Handle pagination links using event delegation
            $(document).on('click', '.pagination-button', function (e) {
                e.preventDefault();
                var pageNumber = $(this).data('pagenumber');
                var searchTerm = $('#searchInput').val();
                var status = $('#statusFilter').val();
                var priority = $('#priorityFilter').val();
                var assignee = $('#assigneeFilter').val();
                loadTasks(pageNumber, searchTerm, status, priority, assignee);
            });
        });
    </script>
</body>
</html>
